{
  "config": {
    "step": {
      "user": {
        "title": "Configure Sorel Connect",
        "description": "Set up your Sorel Connect integration to connect to your MQTT broker and Sorel devices.",
        "data": {
          "host": "MQTT Broker Host",
          "port": "MQTT Broker Port",
          "username": "MQTT Username (optional)",
          "password": "MQTT Password (optional)",
          "broker_tls": "Use TLS/SSL"
        },
        "data_description": {
          "host": "The hostname or IP address of your MQTT broker",
          "port": "The port your MQTT broker is listening on (usually 1883)",
          "username": "Username for MQTT authentication (leave empty if not required)",
          "password": "Password for MQTT authentication (leave empty if not required)",
          "broker_tls": "Enable TLS/SSL encryption for MQTT connection"
        }
      }
    },
    "error": {
      "invalid_host": "Invalid or empty broker host",
      "cannot_connect": "Failed to connect to MQTT broker",
      "invalid_auth": "MQTT authentication failed (check username/password)",
      "timeout": "Connection to MQTT broker timed out",
      "cannot_resolve_host": "Cannot resolve hostname - check if the broker address is correct",
      "connection_refused": "Connection refused - check if the broker is running and the port is correct",
      "network_error": "Network error - broker may be unreachable or blocked by firewall",
      "unknown": "Unexpected error occurred"
    },
    "abort": {
      "already_configured": "This integration is already configured"
    }
  },
  "options": {
    "step": {
      "init": {
        "title": "Sorel Connect Options",
        "description": "Configure API settings for the Sorel Connect integration.",
        "data": {
          "api_server": "Metadata API Server",
          "api_url": "Metadata API URL Template"
        },
        "data_description": {
          "api_server": "Server hostname for device metadata API",
          "api_url": "URL template for fetching device metadata"
        }
      }
    }
  },
  "services": {
    "clear_metadata_cache": {
      "name": "Clear Metadata Cache",
      "description": "Deletes all cached device metadata. The integration will re-fetch metadata from the API."
    }
  }
}
